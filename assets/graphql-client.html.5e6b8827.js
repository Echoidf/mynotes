import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as p,c as o,a as n,d as a,e as t,b as c,r as l}from"./app.8954df3f.js";const i={},r=c(`<p>这一部分将介绍专门的 GraphQL 客户端如何有助于更好地进行查询、缓存和创建可重用模块。</p><p>可以使用原生 JavaScript Fetch API 发出 GraphQL 请求。 例如，为了抓取作者列表，我们可以使用以下代码发出查询：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> limit <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> query <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">query author($limit: Int!) {
    author(limit: $limit) {
        id
        name
    }
}</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>

<span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;/graphql&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;application/json&#39;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;Accept&#39;</span><span class="token operator">:</span> <span class="token string">&#39;application/json&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    query<span class="token punctuation">,</span>
    <span class="token literal-property property">variables</span><span class="token operator">:</span> <span class="token punctuation">{</span> limit <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">r</span> <span class="token operator">=&gt;</span> r<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;data returned:&#39;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这当然是假设你的服务器接受通过 HTTP 发出的 GraphQL 请求。 （还记得 GraphQL 是与协议无关的吗？）。</p><h2 id="why-do-i-need-a-graphql-client" tabindex="-1"><a class="header-anchor" href="#why-do-i-need-a-graphql-client" aria-hidden="true">#</a> 我为什么需要一个 GraphQL 客户端？</h2><p>既然我们已知道可以使用旧有的抓取 API 方式发出请求，那么 GraphQL 客户端的意义是什么？</p><h4 id="constructing-query-processing-response" tabindex="-1"><a class="header-anchor" href="#constructing-query-processing-response" aria-hidden="true">#</a> 构建查询、处理响应</h4><p>GraphQL 客户端有助于构建完整的查询，只需将 GraphQL 文档作为具有相关标头和上下文信息的输入。 因此，你不用每次编写抓取 API 调用，客户端就会为你处理，在解析后提供响应数据和错误。</p><h4 id="managing-ui-state" tabindex="-1"><a class="header-anchor" href="#managing-ui-state" aria-hidden="true">#</a> 管理 UI 状态</h4><p>GraphQL 客户端也有助于跨多个 UI 组件管理 UI 状态并同步数据。</p><h4 id="updating-cache" tabindex="-1"><a class="header-anchor" href="#updating-cache" aria-hidden="true">#</a> 更新缓存</h4><p>GraphQL 客户端也可用来管理从查询或变更中抓取的数据的缓存项。 上面提到的对 UI 的响应式更新是通过缓存实现的。</p>`,12),u={href:"https://github.com/apollographql/apollo-client",target:"_blank",rel:"noopener noreferrer"},d={href:"https://github.com/facebook/relay",target:"_blank",rel:"noopener noreferrer"},h=n("h2",{id:"fluent-graphql-clients",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#fluent-graphql-clients","aria-hidden":"true"},"#"),a(" 流畅的 GraphQL 客户端")],-1),k=n("p",null,"在使用客户端编写 GraphQL 查询或变更时，你会发现它只是一个含有自己的语法的原始字符串。 通常使用外部库将该字符串解析为有效的 GraphQL 查询。",-1),m=n("p",null,"借助流畅的 GraphQL 客户端，即可将这些查询编写为对象。 流畅的 API 旨在通过方法链增加代码的可读性，即通过每种方法返回 this 或 self。 流畅的 GraphQL 客户端支持你将查询编写为对象，然后在幕后将其转换为字符串查询。",-1),v=n("p",null,"除了不用处理字符串，该客户端还提供：",-1),g=n("ul",null,[n("li",null,"强类型"),n("li",null,"类型定义的单一事实来源"),n("li",null,"自动完成查询")],-1),b={href:"https://github.com/hasura/awesome-fluent-graphql",target:"_blank",rel:"noopener noreferrer"};function _(f,y){const s=l("ExternalLinkIcon");return p(),o("div",null,[r,n("p",null,[a("流行在社群中的 GraphQL 客户端包括 "),n("a",u,[a("Apollo Client"),t(s)]),a(" 和 "),n("a",d,[a("Relay"),t(s)]),a("。")]),h,k,m,v,g,n("p",null,[a("以下是一个可以尝试的"),n("a",b,[a("流畅 GraphQL 客户端列表"),t(s)]),a("。")])])}const Q=e(i,[["render",_],["__file","graphql-client.html.vue"]]);export{Q as default};
