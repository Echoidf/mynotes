import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c,a as n,d as s,e as t,b as p,r as l}from"./app.3fdd4a3a.js";const i={},u=p(`<h2 id="一、方案一-后端分页" tabindex="-1"><a class="header-anchor" href="#一、方案一-后端分页" aria-hidden="true">#</a> 一、方案一：后端分页</h2><p>前端向后端发送数据查询请求，可以带上分页参数，后端根据查询参数如数据条数进行查询，对于数据量很大的场景比较友好，每次请求不必一次性查询所有返回给前端。</p><h3 id="_1-mybatisplus内置分页插件" tabindex="-1"><a class="header-anchor" href="#_1-mybatisplus内置分页插件" aria-hidden="true">#</a> 1.MybatisPlus内置分页插件</h3><p>在MybatisPlus的扩展服务中有一个接口IService,其中有很多默认方法，可以用来实现分页查询：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">default</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span> <span class="token keyword">extends</span> <span class="token class-name">IPage</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">E</span> <span class="token function">page</span><span class="token punctuation">(</span><span class="token class-name">E</span> page<span class="token punctuation">,</span> <span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> queryWrapper<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">getBaseMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">selectPage</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在SSM架构中，我们的Service层接口通常都会继承IService&lt;实体类&gt;，可以调用这个方法进行分页,需要传入两个参数：</p><ol><li>Page分页模型</li></ol><blockquote><p>分页之前我们需要知道返回一个分页数据都应该包含哪些内容？</p><ul><li>总记录数</li><li>每页记录数</li><li>总页数</li><li>当前页数</li><li>数据集合</li></ul></blockquote><p>所有的分页请求处理方案都是以这些参数为基础进行封装的</p><p>MybatisPlus插件中提供了封装好的Page分页模型，可以在构造函数中传入当前页，每页显示条数，总条数等</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">8545996863226528798L</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 查询数据列表
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> records <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 总数
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 每页显示条数，默认 10
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> size <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 当前页
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> current <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 排序字段信息
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderItem</span><span class="token punctuation">&gt;</span></span> orders <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以在此基础上进行改良进一步封装</p><ol start="2"><li>QueryWrapper 对象封装的操作类，由MybatisPlus的core包提供，可以理解为封装查询条件的工具</li></ol><p>代码示例</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span> <span class="token punctuation">&gt;</span></span> qw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        qw<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">&quot;s.name&quot;</span><span class="token punctuation">,</span>student<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        qw<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string">&quot;c.name&quot;</span><span class="token punctuation">,</span>student<span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),k=n("thead",null,[n("tr",null,[n("th",null,"方法"),n("th",null,"功能")])],-1),r=n("tr",null,[n("td",null,"qw.eq()"),n("td",null,"等于")],-1),d={href:"http://qw.gt",target:"_blank",rel:"noopener noreferrer"},v=n("td",null,"大于",-1),m={href:"http://qw.lt",target:"_blank",rel:"noopener noreferrer"},b=n("td",null,"小于",-1),g=n("tr",null,[n("td",null,'qw.between("age", 10, 20)'),n("td",null,"age在10到20之间")],-1),h=n("tr",null,[n("td",null,"qw.like()"),n("td",null,"模糊匹配")],-1),y=n("tr",null,[n("td",null,"qw.or()"),n("td",null,"或者")],-1),w={href:"http://qw.in",target:"_blank",rel:"noopener noreferrer"},f=n("td",null,"符合多个条件的值",-1),_=p(`<h3 id="_2-mybatis-使用pagehelper插件" tabindex="-1"><a class="header-anchor" href="#_2-mybatis-使用pagehelper插件" aria-hidden="true">#</a> 2.Mybatis--使用PageHelper插件</h3><p>maven引入:</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.github.pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.2.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>controller层调用：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@ResponseBody</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/list&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">listByPage</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>defaultValue <span class="token operator">=</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> pageNum<span class="token punctuation">,</span> 
		    <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>defaultValue <span class="token operator">=</span> <span class="token string">&quot;5&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> pageSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//查询前，需要调用 PageHelper.startPage()</span>
        <span class="token class-name">PageHelper</span><span class="token punctuation">.</span><span class="token function">startPage</span><span class="token punctuation">(</span>pageNum<span class="token punctuation">,</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token comment">//在 PageHelper.startPage() 后调用 findAll 就是分页查询(物理分页有 limit)</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Furn</span><span class="token punctuation">&gt;</span></span> furnList <span class="token operator">=</span> furnService<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token comment">//分页查询完之后，可以使用 pageInfo 来包装查询后的结果，</span>
        <span class="token class-name">PageInfo</span> pageInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PageInfo</span><span class="token punctuation">(</span>furnList<span class="token punctuation">,</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;pageInfo&quot;</span><span class="token punctuation">,</span> pageInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、方案二-前端分页" tabindex="-1"><a class="header-anchor" href="#二、方案二-前端分页" aria-hidden="true">#</a> 二、方案二：前端分页</h2><p>数据量不大时也可以一次性进行由后端返回所有数据，前端再对要显示的数据进行分页处理，可以减轻对服务器的压力，同样可以处理模糊匹配、条件查询等问题</p><p>示例：vue+element</p><h3 id="_1-使用slice-start-end-方法" tabindex="-1"><a class="header-anchor" href="#_1-使用slice-start-end-方法" aria-hidden="true">#</a> 1.使用slice(start, end)方法</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>     <span class="token comment">//allData为全部数据，tableData是目前表格绑定的数据</span>
     <span class="token keyword">this</span><span class="token punctuation">.</span>tableData <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>allData<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>
        <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>page <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">,</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>page <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">this</span><span class="token punctuation">.</span>total<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>allData<span class="token punctuation">.</span>length

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token comment">// 获取表格分页数据</span>
    <span class="token function">getDataList</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>dataList <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>allData<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>
        <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>pageIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pageSize<span class="token punctuation">,</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>pageIndex <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pageSize
      <span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：</p><p>由于实际展示的页面并不是后端发送过来的数据，有可能遇到请求还没有结束就执行了设置tableData的方法，这样方法执行的顺序就不是我们设想的，会导致页面无法正常显示</p><p>解决方法：</p><p>采用vue的监听器watch对allData（后端发送的数据）进行监听，如果发生了变化就对页面进行刷新设置列表数据</p><p>监听器也常用来监听提交表单时判断表单数据有没有被修改，若没有修改就不向后端发送请求</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">allData</span> <span class="token punctuation">(</span><span class="token parameter">newVal<span class="token punctuation">,</span> oldVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// console.log(&#39;new==&#39;,newVal)</span>
      <span class="token comment">// console.log(&#39;old==&#39;,oldVal)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDataList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">updateForm</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function">handler</span> <span class="token punctuation">(</span><span class="token parameter">val<span class="token punctuation">,</span> old</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//修改的时候监听该表单，新增不需要</span>
        <span class="token comment">//修改了之后改变变量的值</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>defaultValue<span class="token operator">++</span> <span class="token comment">//判断如果变量大于1，则说明值有改动</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultValue <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>isEdit <span class="token operator">=</span> <span class="token boolean">true</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">deep</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">//深度监听form里的每个对象</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-前端进行模糊匹配、条件查询" tabindex="-1"><a class="header-anchor" href="#_2-前端进行模糊匹配、条件查询" aria-hidden="true">#</a> 2.前端进行模糊匹配、条件查询</h3><p>示例：这里我对数据的三个字段:cas、name_cn、name_en进行模糊匹配</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">search</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> searchContext <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataForm<span class="token punctuation">.</span>key
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>searchContext<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDataList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>dataList <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataList<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>cas<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>searchContext<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dataList<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDataList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>dataList <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataList<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>name_cn<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>searchContext<span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dataList<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDataList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>dataList <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataList<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>name_en<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>searchContext<span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token function">isBlank</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> val <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> val <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">||</span> val <span class="token operator">===</span> <span class="token string">&#39;&#39;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,20);function q(x,j){const a=l("ExternalLinkIcon");return o(),c("div",null,[u,n("table",null,[k,n("tbody",null,[r,n("tr",null,[n("td",null,[n("a",d,[s("qw.gt"),t(a)]),s("()")]),v]),n("tr",null,[n("td",null,[n("a",m,[s("qw.lt"),t(a)]),s("()")]),b]),g,h,y,n("tr",null,[n("td",null,[n("a",w,[s("qw.in"),t(a)]),s('("属性", 条件，条件)')]),f])])]),_])}const P=e(i,[["render",q],["__file","分页操作详解.html.vue"]]);export{P as default};
