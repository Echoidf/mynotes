import{_ as t}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as n,c,a as o,d as e,e as a,b as i,r as l}from"./app.6d6f983b.js";const s={},p=i('<p>与 REST 相比，赋予 GraphQL 众多优势的一个主要功能是“内省”。 GraphQL 查询语言是强类型的。 这种强类型系统提供了查询和理解潜在模式的能力。</p><p>模式充当前端和后端团队之间的契约。 但前端开发者如何了解后端模式是怎样的？ 他们如何防止过度抓取或不足抓取？ 这可能是由于“内省”查询。</p><h2 id="introspection-queries" tabindex="-1"><a class="header-anchor" href="#introspection-queries" aria-hidden="true">#</a> 内省查询</h2><p>GraphQL 服务器支持使用同样的 GraphQL 查询语言对其模式进行内省。</p><p>服务器公开以下有关<code>Query</code>操作类型的内省查询。</p><ul><li><code>__schema</code></li><li><code>__type</code></li><li><code>__typename</code></li></ul><p>请注意，内省查询的开头是<code>__</code>。</p><h2 id="community-tooling" tabindex="-1"><a class="header-anchor" href="#community-tooling" aria-hidden="true">#</a> 社群工具</h2>',8),h={href:"https://github.com/graphql/graphiql",target:"_blank",rel:"noopener noreferrer"},d={href:"https://github.com/prisma-labs/graphql-playground",target:"_blank",rel:"noopener noreferrer"},_=o("p",null,[e("以上工具利用"),o("code",null,"__schema"),e("内省查询提供模式的文档。 尝试"),o("code",null,"__schema"),e("查询以查看不同的选择集、字段和指示，从而进行详细了解。")],-1);function u(m,f){const r=l("ExternalLinkIcon");return n(),c("div",null,[p,o("p",null,[e("内省的能力支持社群围绕 GraphQL 开发出色的工具。 存在 "),o("a",h,[e("GraphiQL"),a(r)]),e(" 和 "),o("a",d,[e("GraphQL Playground"),a(r)]),e("，两者利用“内省”功能，为开发者提供自编文件功能并快速试用 API。")]),_])}const b=t(s,[["render",u],["__file","introspection.html.vue"]]);export{b as default};
