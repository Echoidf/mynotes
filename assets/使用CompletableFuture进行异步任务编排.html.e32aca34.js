import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,b as t}from"./app.7b0c1160.js";const p={},e=t(`<h1 id="使用completablefuture进行异步任务编排" tabindex="-1"><a class="header-anchor" href="#使用completablefuture进行异步任务编排" aria-hidden="true">#</a> 使用CompletableFuture进行异步任务编排</h1><p>Java8引入了一个新特性：CompletableFuture，让异步任务的编排变得更简单了。</p><p><code>CompletableFuture</code>可以指定异步处理流程：</p><ul><li><code>thenAccept()</code>处理正常结果；</li><li><code>exceptional()</code>处理异常结果；</li><li><code>thenApplyAsync()</code>用于串行化另一个<code>CompletableFuture</code>；</li><li><code>anyOf()</code>和<code>allOf()</code>用于并行化多个<code>CompletableFuture</code>。</li></ul><p>场景：假设你正在开发一个天气应用，用户可以输入多个城市名，应用会同时向多个天气API发送请求，然后将结果合并并展示给用户。</p><p>使用CompletableFuture，你可以并行地发送这些请求并等待它们的完成，然后将结果进行合并。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> cities <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;Beijing&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;London&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;NewYork&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CompletableFuture</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> futures <span class="token operator">=</span> cities<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>city <span class="token operator">-&gt;</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">getWeather</span><span class="token punctuation">(</span>city<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> allFutures <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">allOf</span><span class="token punctuation">(</span>futures<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> combinedFuture <span class="token operator">=</span> allFutures<span class="token punctuation">.</span><span class="token function">thenApplyAsync</span><span class="token punctuation">(</span>v <span class="token operator">-&gt;</span> futures<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                                                             <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">CompletableFuture</span><span class="token operator">::</span><span class="token function">join</span><span class="token punctuation">)</span>
                                                                             <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> weatherList <span class="token operator">=</span> combinedFuture<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>weatherList<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> <span class="token operator">|</span> <span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getWeather</span><span class="token punctuation">(</span><span class="token class-name">String</span> city<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token string">&quot;weather in &quot;</span> <span class="token operator">+</span> city<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>CompletableFuture是一个Future的实现类，它允许你以函数式的方式处理异步操作的结果。</p><p>CompletableFuture的主要特点包括：</p><ol><li><p>异步执行：可以使用CompletableFuture来执行耗时的操作，而<strong>不会阻塞主线程</strong>。而<strong>使用Future.get方法是会阻塞主线程的</strong></p></li><li><p>链式操作：可以将多个CompletableFuture<strong>链接在一起，形成一个操作流</strong>，每个操作都可以依赖前一个操作的结果。</p></li><li><p>异常处理：可以使用<strong>exceptionally()方法来处理异常情况</strong>，或者使用handle()方法来处理正常结果和异常情况。</p></li><li><p>组合操作：可以使用**thenCompose()**方法将多个CompletableFuture组合成一个CompletableFuture，以便更灵活地处理结果。</p></li><li><p>并行执行：可以使用**allOf()、anyOf()**等方法来并行执行多个CompletableFuture。</p></li></ol><p>以下是一些CompletableFuture的常用方法：</p><ol><li><p>supplyAsync()：以异步方式执行一个任务，并返回一个CompletableFuture。</p></li><li><p>thenApply()：对CompletableFuture的结果应用一个函数，返回一个新的CompletableFuture。</p></li><li><p>thenAccept()：对CompletableFuture的结果应用一个消费者函数，不返回结果。</p></li><li><p>thenRun()：在CompletableFuture完成后执行一个Runnable任务。</p></li><li><p>thenCompose()：将多个CompletableFuture组合成一个CompletableFuture。</p></li><li><p>exceptionally()：处理CompletableFuture的异常情况。</p></li><li><p>handle()：处理CompletableFuture的正常结果和异常情况。</p></li><li><p>allOf()：并行执行多个CompletableFuture，并在所有CompletableFuture完成后返回一个CompletableFuture。</p></li><li><p>anyOf()：并行执行多个CompletableFuture，并在任意一个CompletableFuture完成后返回一个CompletableFuture。</p></li></ol>`,12),o=[e];function l(c,u){return s(),a("div",null,o)}const r=n(p,[["render",l],["__file","使用CompletableFuture进行异步任务编排.html.vue"]]);export{r as default};
