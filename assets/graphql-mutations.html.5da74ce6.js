import{_ as i}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as l,c,a as n,e as p,w as o,f as a,b as e,d as s,r}from"./app.578bc06c.js";const u={},d=n("p",null,'import {Link} from "gatsby";',-1),h=n("p",null,"这些是在攻克变更（哈哈）前应该了解的概念：",-1),k=e(`<p>现在开始了解如何使用 GraphQL“写入”数据。 GraphQL 变更是 GraphQL 查询的类型，可能导致后端“变更”或变化的状态，比如常见的<code>&#39;POST&#39;</code>、 <code>&#39;PUT&#39;</code>、<code>&#39;PATCH&#39;</code>、<code>&#39;DELETE&#39;</code>API。</p><h2 id="basic-mutations" tabindex="-1"><a class="header-anchor" href="#basic-mutations" aria-hidden="true">#</a> 基本变更</h2><p>由于我们将 Hasura 用于 GraphQL API，因此我们可以在应用程序中进行插入、更新或删除等变更。</p><p>我们在待办事项应用程序上下文中尝试这些变更，以了解变更的运作方式。 你从另一个 GraphQL 服务中获得的变更，比如你的 API 团队已自行创建，则会有所不同。</p><h3 id="create-a-todo" tabindex="-1"><a class="header-anchor" href="#create-a-todo" aria-hidden="true">#</a> 创建待办事项</h3><p>现在，发送 API 调用，以创建待办事项。 如你所料，这是我们的待办事项应用程序的关键一环。 😉</p><blockquote><p><strong>专业提示</strong>： 比方说，我们现在还不知道创建待办事项的 变更的名称。 GraphiQL 来帮你！ 转到 GraphiQL，然后点击右侧的“文档”选项卡。 在这里输入“待办事项”，即可看到一个使用待办事项的 GraphQL 查询和类型 列表。 通读它们的说明，很快你就会 发现<code>insert_todos</code>就是你需要的操作。</p></blockquote><p>创建待办事项的变更的标题为<code>insert_todos</code>。</p><div class="language-graphql line-numbers-mode" data-ext="graphql"><pre class="language-graphql"><code><span class="token keyword">mutation</span> <span class="token punctuation">{</span>
  <span class="token property-query property-mutation">insert_todos</span><span class="token punctuation">(</span><span class="token attr-name">objects</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token attr-name">title</span><span class="token punctuation">:</span> <span class="token string">&quot;new todo&quot;</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token object">returning</span> <span class="token punctuation">{</span>
      <span class="token property">id</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),v=e(`<p><b><a href="https://hasura.io/learn/graphql/graphiql" target="_blank">在 GraphiQL 中尝试</a></b></p><h2 id="returning-data-after-the-mutation" tabindex="-1"><a class="header-anchor" href="#returning-data-after-the-mutation" aria-hidden="true">#</a> 变更后返回数据</h2><p>请注意，待插入的待办事项的数据作为参数发送至<code>insert_todos</code>变更。 但是，变更的“字段”指定了你希望从服务器获得的_响应_的形状。</p><p>假设我们希望在将待办事项作为响应创建后获得整个待办事项对象：</p><div class="language-graphql line-numbers-mode" data-ext="graphql"><pre class="language-graphql"><code><span class="token keyword">mutation</span> <span class="token punctuation">{</span>
  <span class="token property-query property-mutation">insert_todos</span><span class="token punctuation">(</span><span class="token attr-name">objects</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token attr-name">title</span><span class="token punctuation">:</span> <span class="token string">&quot;new todo&quot;</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token object">returning</span> <span class="token punctuation">{</span>
      <span class="token property">id</span>
      <span class="token property">title</span>
      <span class="token property">is_completed</span>
      <span class="token property">is_public</span>
      <span class="token property">created_at</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),m=e(`<p><b><a href="https://hasura.io/learn/graphql/graphiql" target="_blank">在 GraphiQL 中尝试</a></b></p><h2 id="parameterise-what-you-insert" tabindex="-1"><a class="header-anchor" href="#parameterise-what-you-insert" aria-hidden="true">#</a> 将你插入的内容参数化</h2><p>对于变更，我们几乎始终必须对参数进行参数化！ 我们的应用程序中很少（如有）出现“硬编码”突变。 这是因为要捕获什么数据、如何修改或删除某些内容的参数通常取决于用户的操作。</p><p>既然我们已了解如何使用查询变量进行参数化，那么我们应用一下：</p><div class="language-graphql line-numbers-mode" data-ext="graphql"><pre class="language-graphql"><code><span class="token comment"># The parameterised GraphQL mutation</span>
<span class="token keyword">mutation</span><span class="token punctuation">(</span><span class="token variable">$todo</span><span class="token punctuation">:</span> <span class="token property">todos_insert_input</span><span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token property-query">insert_todos</span><span class="token punctuation">(</span><span class="token attr-name">objects</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token variable">$todo</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token object">returning</span> <span class="token punctuation">{</span>
      <span class="token property">id</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code># As a query variable
<span class="token punctuation">{</span>
  <span class="token string-property property">&quot;todo&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;A new dynamic todo&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，<code>todos_insert_input</code>是变量<code>$todo</code>的类型，且<code>!</code>用来表示这是个强制输入。</p>`,7),b=n("p",null,[n("b",null,[n("a",{href:"https://hasura.io/learn/graphql/graphiql",target:"_blank"},"在 GraphiQL 中尝试")])],-1),g=n("p",null,"稍后，我们将探索更多更新或删除数据的变更。 这是深入了解变更的良好开端！",-1),_=n("h2",{id:"summary",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#summary","aria-hidden":"true"},"#"),s(" 总结")],-1),q=n("ul",null,[n("li",null,"你可以进行基本的 GraphQL 变更"),n("li",null,"你可以使用查询变量将动态参数/数据传递至变更")],-1),y=n("p",null,"接下来，我们来了解 GraphQL 订阅",-1);function f(L,G){const t=r("Link");return l(),c("div",null,[d,h,n("ul",null,[n("li",null,[p(t,{to:"/graphql-queries/#graphiql"},{default:o(()=>[s("使用 GraphiQL")]),_:1})]),n("li",null,[p(t,{to:"/graphql-queries/#graphqlvariables:passingargumentstoyourqueriesdynamically"},{default:o(()=>[s("使用查询变量")]),_:1})])]),k,a(" [//]: # TODO: "),v,a(" [//]: # TODO: "),m,a(" [//]: # TODO: "),b,g,_,q,y])}const w=i(u,[["render",f],["__file","graphql-mutations.html.vue"]]);export{w as default};
