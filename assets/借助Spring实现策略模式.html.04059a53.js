const t=JSON.parse('{"key":"v-3425fdf8","path":"/codenotes/spring/%E5%80%9F%E5%8A%A9Spring%E5%AE%9E%E7%8E%B0%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.html","title":"借助Spring实现策略模式","lang":"zh-CN","frontmatter":{"title":"借助Spring实现策略模式","icon":"edit","category":["Spring"],"tag":["Spring","策略模式"],"sticky":false,"star":32,"article":true,"timeline":true,"description":"借助 Spring 实现策略模式 策略模式：定义一系列的算法，把它们一个个封装起来，并且使它们可相互替换。 应用场景： 计算商品优惠的时候会有各种优惠券，满减券、奖金券、折扣券等; 抽奖过程中会使用到多种不同的抽奖算法; 合理地使用策略模式可以让代码更具有可维护性，替代了大量的 if-else 语句。 策略模式通常和模板模式结合在一起使用，模板模式用于...","head":[["meta",{"property":"og:url","content":"http://www.codepit.tech/mynotes/mynotes/codenotes/spring/%E5%80%9F%E5%8A%A9Spring%E5%AE%9E%E7%8E%B0%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"Zuooの学习笔记"}],["meta",{"property":"og:title","content":"借助Spring实现策略模式"}],["meta",{"property":"og:description","content":"借助 Spring 实现策略模式 策略模式：定义一系列的算法，把它们一个个封装起来，并且使它们可相互替换。 应用场景： 计算商品优惠的时候会有各种优惠券，满减券、奖金券、折扣券等; 抽奖过程中会使用到多种不同的抽奖算法; 合理地使用策略模式可以让代码更具有可维护性，替代了大量的 if-else 语句。 策略模式通常和模板模式结合在一起使用，模板模式用于..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-09-10T14:16:58.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:tag","content":"策略模式"}],["meta",{"property":"article:modified_time","content":"2023-09-10T14:16:58.000Z"}]]},"excerpt":"","headers":[],"git":{"createdTime":1694350798000,"updatedTime":1694355418000,"contributors":[{"name":"zql","email":"1241236275@qq.com","commits":3}]},"readingTime":{"minutes":2.72,"words":817},"filePathRelative":"codenotes/spring/借助Spring实现策略模式.md","localizedDate":"2023年9月10日"}');export{t as data};
