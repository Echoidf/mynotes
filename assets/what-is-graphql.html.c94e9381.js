import{_ as a}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as n,c as s,b as e}from"./app.ccb55c41.js";const p={},t=e(`<h2 id="what-is-graphql" tabindex="-1"><a class="header-anchor" href="#what-is-graphql" aria-hidden="true">#</a> 什么是 GraphQL？</h2><p>GraphQL 是关于如何与 API 对话的规范。 它通常用于 HTTP，其中的核心思路是将“查询”<code>POST</code>至 HTTP 端点，而不是为了不同的资源访问不同的 HTTP 端点。</p><p>GraphQL 专为网络/移动应用（HTTP 客户端）的开发者设计，以便能够进行 API 调用，以从其后端 API 精确抓取所需的数据。</p><p>在深入理解 GraphQL 前，有必要了解一下 GraphQL 在 HTTP 客户端的实际使用方式。</p><h2 id="graphql-over-http" tabindex="-1"><a class="header-anchor" href="#graphql-over-http" aria-hidden="true">#</a> GraphQL 通过 HTTP 提供服务</h2><p>查看下方图表，了解 GraphQL 通常如何用在你的堆栈中：</p><p><img src="https://graphql-engine-cdn.hasura.io/learn-hasura/assets/graphql-react/graphql-on-http.png" alt="GraphQL 通过 HTTP 提供服务"></p><h3 id="graphql-client-server-flow" tabindex="-1"><a class="header-anchor" href="#graphql-client-server-flow" aria-hidden="true">#</a> GraphQL 客户端-服务器流：</h3><ol><li>请注意，GraphQL 查询不完全是 JSON；它看起来类似 你<em>想要</em>的 JSON 形状。 因此，当我们发出 &#39;POST&#39; 请求以将我们的 GraphQL 查询发送至 服务器时，客户端将其作为“字符串”发送。</li><li>服务器获取 JSON 对象并提取查询字符串。 根据 GraphQL 语法和图表数据模型（GraphQL 模式），服务器处理 并验证 GraphQL 查询。</li><li>正如典型的 API 服务器，GraphQL API 服务器随之调用 数据库或其他服务，以抓取客户端请求的数据。</li><li>接下来，服务器获取数据并以 JSON 对象的形式将其返回客户端。</li></ol><h3 id="example-of-graphql-client-setup" tabindex="-1"><a class="header-anchor" href="#example-of-graphql-client-setup" aria-hidden="true">#</a> GraphQL 客户端设置示例：</h3><p>在日常工作中，你其实无需担心潜在的 HTTP 请求和响应。</p><p>就像你在使用 REST API 并借助 HTTP 客户端来减少发出 API 调用和处理响应的样板时一样，你可以选择一个 GraphQL 客户端，更轻松地编写 GraphQL 查询、发送查询并处理响应。</p><p>其实，发送 GraphQL 查询和接受 GraphQL 响应的机制已发展为标准。 这使得在客户端使用 GraphQL 变得非常容易。</p><p>以下是典型的 GraphQL 客户端设置和发出查询的形式：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
<span class="token comment">// Setup a GraphQL client to use the endpoint</span>

<span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Client</span><span class="token punctuation">(</span><span class="token string">&quot;https://myapi.com/graphql&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">// Now, send your query as a string (Note that \` is used to create a multi-line</span>
<span class="token comment">// string in javascript).</span>

client<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
  query {
    user {
      id
      name
    }
  }</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请务必注意，你可以使用简单的 JavaScript <code>fetch</code> API 进行 GraphQL API 调用，而且简单的用例其实不需要 GraphQL 客户端。 稍后我们将在 GraphQL 客户端部分详述这一点。</p>`,16),i=[t];function r(l,c){return n(),s("div",null,i)}const d=a(p,[["render",r],["__file","what-is-graphql.html.vue"]]);export{d as default};
