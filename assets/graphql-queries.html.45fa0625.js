import{_ as p}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as t,c as i,a,d as n,e,b as r,r as l}from"./app.7b0c1160.js";const o={},c=a("h2",{id:"try-out-graphql-queries",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#try-out-graphql-queries","aria-hidden":"true"},"#"),n(" 尝试 GraphQL 查询")],-1),u=a("p",null,'在本教程中，我们为你创建了一个 GraphQL API。 浏览 GraphQL API 最常见的方式是使用 GraphiQL。 GraphiQL 是 Facebook 开发的工具（念作 "graphical"），可轻松探索任何 GraphQL API。',-1),d=a("p",null,"在将 GraphiQL 连接到 GraphQL 端点后，它会向服务器查询其 GraphQL 模式，并提供一个用于浏览和测试查询的 UI，提供令人叹为观止的自动完成功能！",-1),h=a("p",null,[a("img",{src:"https://graphql-engine-cdn.hasura.io/learn-hasura/assets/graphql-react/graphiql.gif",alt:"GraphiQL 演示"})],-1),v=a("p",null,"有了 GraphiQL 等工具，GraphQL API 可极其轻松地在你的应用程序中使用并集成 API，而无需外部文档工具。",-1),k={href:"https://hasura.io/learn/graphql/graphiql",target:"_blank",rel:"noopener noreferrer"},m=a("p",null,"如果你在某个项目中使用 GraphQL API，你几乎无一例外地要使用像 GraphiQL 这样的工具来探索并测试你的 GraphQL 查询。",-1),b=a("h2",{id:"basic-graphql-query",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#basic-graphql-query","aria-hidden":"true"},"#"),n(" 基本的 GraphQL 查询")],-1),g={href:"https://hasura.io/learn/graphql/graphiql",target:"_blank",rel:"noopener noreferrer"},q=a("li",null,"你会看到一个 URL 以及含有身份验证令牌的标头，令牌将与你的 GraphQL 查询一起发送。",-1),L=a("li",null,"现在，将该 GraphQL 查询粘贴在 GraphiQL 窗口中",-1),G=r(`<div class="language-graphql line-numbers-mode" data-ext="graphql"><pre class="language-graphql"><code> <span class="token keyword">query</span> <span class="token punctuation">{</span>
   <span class="token object">users</span> <span class="token punctuation">{</span>
     <span class="token property">name</span>
   <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>按<code>ctrl + enter</code>或<code>cmd + enter</code> (mac) 或单击 ▶️ 图标，以运行 GraphQL 查询 5。 右侧将显示系统中按名称排列的用户列表！</li></ol><p><b><a href="https://hasura.io/learn/graphql/graphiql" target="_blank">在 GraphiQL 中尝试</a></b></p><p>请谨记，这不是魔法！ 托管的 GraphiQL 应用程序向给定端点处的服务器发送带有 HTTP 标头的 GraphQL 查询字符串。 然后，该服务器发送右手边显示的响应。</p><h2 id="fetching-graphs" tabindex="-1"><a class="header-anchor" href="#fetching-graphs" aria-hidden="true">#</a> 抓取“图表”</h2><p>我们的待办事项应用程序包含用户、待办事项和关于当前在线的用户的信息。 这是我们的 API“模式”的形式：</p><p><img src="https://graphql-engine-cdn.hasura.io/learn-hasura/assets/graphql-react/schema.png" alt="模式"></p><p>如你所见，这是一个“图表”样的模式，其中的 3 个模型均互相链接。</p><p>我们尝试进行查询，从整个“图表”中获取不同的数据片段。</p><h3 id="fetch-users-and-their-todos" tabindex="-1"><a class="header-anchor" href="#fetch-users-and-their-todos" aria-hidden="true">#</a> 抓取用户及其待办事项</h3><p>该 GraphQL 查询将抓取所有用户及其公开可见的待办事项：</p><div class="language-graphql line-numbers-mode" data-ext="graphql"><pre class="language-graphql"><code> <span class="token keyword">query</span> <span class="token punctuation">{</span>
   <span class="token object">users</span> <span class="token punctuation">{</span>
     <span class="token property">name</span>
     <span class="token object">todos</span> <span class="token punctuation">{</span>
       <span class="token property">title</span>
     <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><b><a href="https://hasura.io/learn/graphql/graphiql" target="_blank">在 GraphiQL 中尝试</a></b></p><h3 id="fetch-online-users" tabindex="-1"><a class="header-anchor" href="#fetch-online-users" aria-hidden="true">#</a> 抓取在线用户及其个人资料信息</h3><p>该 GraphQL 查询将抓取所有当前在线的用户及其个人资料信息（目前只有他们的名称）：</p><div class="language-graphql line-numbers-mode" data-ext="graphql"><pre class="language-graphql"><code> <span class="token keyword">query</span> <span class="token punctuation">{</span>
   <span class="token object">online_users</span> <span class="token punctuation">{</span>
     <span class="token property">last_seen</span>
     <span class="token object">user</span> <span class="token punctuation">{</span>
       <span class="token property">name</span>
     <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><b><a href="https://hasura.io/learn/graphql/graphiql" target="_blank">在 GraphiQL 中尝试</a></b></p><h2 id="adding-parameters" tabindex="-1"><a class="header-anchor" href="#adding-parameters" aria-hidden="true">#</a> 将参数添加至 GraphQL 查询</h2><p>大多数 API 调用通常使用参数等指定你要抓取什么数据。 如果你熟悉如何进行<code>GET</code>调用，则你应该使用过查询参数。 例如，如需抓取仅 10 个待办事项，你可能已进行这一 API 调用： <code>GET /api/todos?limit=10</code>。</p><p>它的 GraphQL 查询模拟是<em>参数</em>，可以将其附加到一个“字段”。</p><h3 id="basic-argument" tabindex="-1"><a class="header-anchor" href="#basic-argument" aria-hidden="true">#</a> 基本参数： 抓取 10 个待办事项</h3><p>该 GraphQL 查询将抓取 10 个待办事项，而非全部。</p><div class="language-graphql line-numbers-mode" data-ext="graphql"><pre class="language-graphql"><code><span class="token keyword">query</span> <span class="token punctuation">{</span>
  <span class="token property-query">todos</span><span class="token punctuation">(</span><span class="token attr-name">limit</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token property">id</span>
    <span class="token property">title</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><b><a href="https://hasura.io/learn/graphql/graphiql" target="_blank">在 GraphiQL 中尝试</a></b></p><p>这里要检查的最重要的一点是<code>limit: 10</code>。GraphQL 服务器将提供一列参数，可用在特定字段旁的<code>()</code>中。 在我们的例子中，我们使用 Hasura 创建 GraphQL 后端，它提供筛选、排序和分页参数。 你使用的 GraphQL 服务器或 API 可能提供可以使用的不同参数集。</p><h3 id="multiple-arguments" tabindex="-1"><a class="header-anchor" href="#multiple-arguments" aria-hidden="true">#</a> 多个字段的多个参数： 为每个用户抓取 1 个用户和 5 个最新待办事项</h3><div class="language-graphql line-numbers-mode" data-ext="graphql"><pre class="language-graphql"><code><span class="token keyword">query</span> <span class="token punctuation">{</span>
  <span class="token property-query">users</span> <span class="token punctuation">(</span><span class="token attr-name">limit</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token property">id</span>
    <span class="token property">name</span>
    <span class="token property-query">todos</span><span class="token punctuation">(</span><span class="token attr-name">order_by</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token attr-name">created_at</span><span class="token punctuation">:</span> <span class="token property">desc</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token attr-name">limit</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token property">id</span>
      <span class="token property">title</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，我们正在将参数传递到不同的字段。 该 GraphQL 查询读作：</p><blockquote><p>抓取用户（限值为 1）及其待办事项（按创建时间降序排列，限值为 5）。</p></blockquote><p><b><a href="https://hasura.io/learn/graphql/graphiql" target="_blank">在 GraphiQL 中尝试</a></b></p><h2 id="graphql-variables" tabindex="-1"><a class="header-anchor" href="#graphql-variables" aria-hidden="true">#</a> GraphQL 变量： 动态地将参数传递至你的查询</h2><p>很好，不过我们还有个问题。 如果想创建一个查询，使用动态提供的参数抓取数据，就必须再次创建整个查询字符串。</p><p>这是我们不希望进行的操作：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> limit <span class="token operator">=</span> <span class="token function">getMaxTodosFromUserInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> query <span class="token operator">=</span> <span class="token string">&quot;query { todos (limit: &quot;</span> <span class="token operator">+</span> limit<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;) {id title} }&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>幸运的是，我们永远不必进行这项操作！ GraphQL 变量是可以在查询中发送的额外变量，这样才能动态提供“参数”！</p><h2 id="fetch-limit" tabindex="-1"><a class="header-anchor" href="#fetch-limit" aria-hidden="true">#</a> 抓取待办事项的$限值</h2><p>这是 GraphQL 查询的形式：</p><div class="language-graphql line-numbers-mode" data-ext="graphql"><pre class="language-graphql"><code><span class="token keyword">query</span> <span class="token punctuation">(</span><span class="token variable">$limit</span><span class="token punctuation">:</span> <span class="token scalar">Int</span><span class="token operator">!</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token property-query">todos</span><span class="token punctuation">(</span><span class="token attr-name">limit</span><span class="token punctuation">:</span> <span class="token variable">$limit</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token property">id</span>
    <span class="token property">title</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了上述查询，我们还发送一个变量对象：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
   <span class="token property">&quot;limit&quot;</span><span class="token operator">:</span> <span class="token number">10</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们将从客户端发送查询和变量，而不是仅仅将查询发送至 GraphQL 服务器。 GraphQL 服务器将自动为我们将此变量用在查询中的正确位置！</p><p>在 GraphiQL 中尝试此操作：</p><ol><li>转到 GraphiQL</li><li>写出该查询</li><li>滚动至页面底部，这里有个较小的面板“查询变量”</li><li>将查询变量添加为 JSON 对象</li></ol><p><b><a href="https://hasura.io/learn/graphql/graphiql" target="_blank">在 GraphiQL 中尝试</a></b></p><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary" aria-hidden="true">#</a> 总结</h2><ul><li>现在就可以进行 GraphQL 查询了</li><li>你知道如何将参数传递至 GraphQL 查询</li><li>你知道如何通过使用查询变量使你的参数动态化</li></ul><p>接下来，我们来看一下写入数据，而不仅仅是抓取数据！</p>`,47);function Q(_,y){const s=l("ExternalLinkIcon");return t(),i("div",null,[c,u,d,h,v,a("p",null,[n("点击此处，访问 GraphiQL，了解这款实时待办事项应用程序的教程："),a("a",k,[n("hasura.io/learn/graphql/graphiql"),e(s)])]),m,b,a("ol",null,[a("li",null,[n("打开 GraphiQL："),a("a",g,[n("hasura.io/learn/graphql/graphiql"),e(s)]),n("。 你必须登录，才能获得查询该 API 的身份验证令牌。 在实际应用情境中，你的 GraphQL API 会得到保护。")]),q,L]),G])}const I=p(o,[["render",Q],["__file","graphql-queries.html.vue"]]);export{I as default};
