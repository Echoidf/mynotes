import{_ as s}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as a,c as l,a as t,b as e,d as r,e as o,r as i}from"./app.5bb5554b.js";const n={},h=t("h1",{id:"redis五大数据类型和结构",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#redis五大数据类型和结构","aria-hidden":"true"},"#"),e(" Redis五大数据类型和结构")],-1),c={href:"https://redis.io/commands",target:"_blank",rel:"noopener noreferrer"},y={href:"http://redisdoc.com/",target:"_blank",rel:"noopener noreferrer"},k=o('<p>五种常用：</p><ul><li>string</li><li>hash</li><li>list</li><li>set</li><li>zset(sorted_set)</li></ul><h2 id="_1-string" tabindex="-1"><a class="header-anchor" href="#_1-string" aria-hidden="true">#</a> 1. string</h2><p><strong><code>特点：二进制安全，可以包含任何数据，包括图片或者序列化对象</code></strong></p><p>一个 Redis 中字符串 value 最多可以是 512M</p><table><thead><tr><th>指令</th><th>功能</th></tr></thead><tbody><tr><td>set/get</td><td>设置/获取键值</td></tr><tr><td>append</td><td>追加到原值末尾</td></tr><tr><td>strlen</td><td>获取值的长度</td></tr><tr><td>setnx</td><td>当key不存在时设置key的值</td></tr><tr><td>setex key seconds val</td><td>设置键值并设置失效时间</td></tr><tr><td>incr/decr</td><td>为key储存的数字值加上一/减一</td></tr><tr><td>incrby/decrby</td><td>数字值增减，自定义步长</td></tr><tr><td>mset/mget</td><td>同时设置/获取一个或多个 key-value 对</td></tr><tr><td>getrange key start end</td><td>获得值的范围（类似substring）</td></tr><tr><td>setrange key offset val</td><td>从偏移量offset开始， 用val参数<strong>覆写</strong>(overwrite)键key储存的字符串值</td></tr><tr><td>getset key value</td><td>以新换旧，设置了新值同时获得旧值</td></tr></tbody></table><h2 id="_2-list" tabindex="-1"><a class="header-anchor" href="#_2-list" aria-hidden="true">#</a> 2. list</h2><p><strong><code>list 类型, 保存多个数据，底层使用双向链表存储结构实现</code></strong></p><table><thead><tr><th>指令</th><th>功能</th></tr></thead><tbody><tr><td>lpush/rpush value[value ...]</td><td>lpush是左边表头插入，rpush是右边表尾插入</td></tr><tr><td>lpushx/rpushx key value</td><td>插入表头/表尾，当且仅当key存在并是一个列表</td></tr><tr><td>lrange key start end</td><td>返回列表 key 中指定区间[start,end]内的元素(-1代表最后一个元素)</td></tr><tr><td>lindex key index</td><td>按照索引下标获得元素(从左到右)</td></tr><tr><td>llen key</td><td>获得列表长度</td></tr><tr><td>linsert key before val newvalue</td><td>在 <code>&lt;value&gt;</code> 的前面插入 <code>&lt;newvalue&gt;</code></td></tr><tr><td>lrem key  n value</td><td>从左边删除 n 个 value(从左到右)</td></tr><tr><td>lset key index value</td><td>将列表 key 下标为 index 的值替换成 value</td></tr></tbody></table><p>list最佳实践：</p><ul><li>redis应用于具有操作先后顺序的数据控制</li><li>应用场景如：系统通知，按照时间顺序展示，将最近的通知列在前面</li></ul><h2 id="_3-set" tabindex="-1"><a class="header-anchor" href="#_3-set" aria-hidden="true">#</a> 3. set</h2><p><strong><code>set 提供的功能与 list 类似是一个列表的功能，特殊之处在于 set 是可以自动排重的, 即值是不允许重复的</code></strong></p><table><thead><tr><th>指令</th><th>功能</th></tr></thead><tbody><tr><td>sadd key member [member...]</td><td>将一个或多个member元素加入到集合key当中，已经存在于集合的member元素将被忽略</td></tr><tr><td>smembers key</td><td>返回集合key中的所有元素 <code>&lt;不保证顺序&gt;</code></td></tr><tr><td>sismember key value</td><td>判断集合 <code>&lt;key&gt; </code>是否为含有该 <code>&lt;value&gt;</code> 值，有 1，没有 0</td></tr><tr><td>scard key</td><td>返回该集合的元素个数</td></tr><tr><td>srem key val1 val2 ...</td><td>删除集合中的某个元素</td></tr><tr><td>spop key</td><td>随机从该集合中吐出一个值</td></tr><tr><td>srandmember key n</td><td>随机从该集合中取出 n 个值。不会从集合中删除</td></tr><tr><td>smove source destination value</td><td>把集合中一个值从一个集合移动到另一个集合</td></tr><tr><td>sinter key1 key2</td><td>返回两个集合的交集元素</td></tr><tr><td>sunion key1 key2</td><td>返回两个集合的并集元素</td></tr><tr><td>sdiff key1 key2</td><td>返回两个集合的差集元素(key1 中的，不包含 key2 中的)</td></tr></tbody></table><h2 id="_4-hash" tabindex="-1"><a class="header-anchor" href="#_4-hash" aria-hidden="true">#</a> 4. hash</h2><p><strong><code> Redis hash 是一个键值对集合，hash 适合用于存储对象， 类似 Java 里面的Map&lt;String,Object&gt;</code></strong></p><table><thead><tr><th>指令</th><th>功能</th></tr></thead><tbody><tr><td>hset key feild val</td><td>将哈希表 hash 中域 field 的值设置为value， 如果feild已经存在就覆盖</td></tr><tr><td>hget key field</td><td>从 <code>&lt;key&gt;</code> 集合 <code>&lt;field&gt;</code> 取出 value</td></tr><tr><td>hmset/hmget</td><td>批量设置/取出</td></tr><tr><td>hexists key field</td><td>查看哈希表 key 中，给定域 field 是否存在</td></tr><tr><td>hkeys key</td><td>列出该hash集合中所有field</td></tr><tr><td>hvals key</td><td>列出该 hash 集合的所有 value</td></tr><tr><td>hincrby key field increment</td><td>为哈希表 key 中的域 field 的值加上增量</td></tr><tr><td>hsetnx key field vlaue</td><td>将哈希表 key 中的域 field 的值设置为 value ，当且仅当域 field 不存在</td></tr></tbody></table><h2 id="_5-zset-sorted-set" tabindex="-1"><a class="header-anchor" href="#_5-zset-sorted-set" aria-hidden="true">#</a> 5. Zset(sorted set)</h2><ul><li>Redis 有序集合 zset 与普通集合 set 非常相似，是一个没有重复元素的字符串集合</li><li>不同之处是有序集合的每个成员都关联了一个评分(score),这个评分(score)被用来按照从最低分到最高分的方式排序集合中的成员。集合的成员是唯一的，但是评分可以重复</li></ul><table><thead><tr><th>指令</th><th>功能</th></tr></thead><tbody><tr><td>zadd key score1 val1 [score2 val2 ...]</td><td>将一个或多个 member 元素及其 score 值加入到有序集 key 当中</td></tr><tr><td>zrange key start end [WITHSCORES]</td><td>返回有序集 key 中，start,stop之间的元素，带 WITHSCORES，可以让分数一起和值返回到结果集</td></tr><tr><td>zscore key member</td><td>返回有序集 key 中，成员 member 的 score 值</td></tr><tr><td>zrangebyscore key<br> min max [withscores] [limit offset count]</td><td>返回有序集 key 中，所有 score 值介于min 和 max 之间(包括等于 min 或 max )的成员。有序集成员按 score 值递增(从小到大)次序排列</td></tr><tr><td>zrevrangebyscore key<br>max min [withscores] [limit offset count]</td><td>同上，改为从大到小排列</td></tr><tr><td>zincrby key increment value</td><td>为元素的 score 加上增量</td></tr><tr><td>zrem key value</td><td>删除该集合下，指定值的元素</td></tr><tr><td>zcount key min max</td><td>统计该集合，分数区间内的元素个数</td></tr><tr><td>zrank key value</td><td>返回该值在集合中的排名，从 0 开始</td></tr></tbody></table>',20);function m(u,b){const d=i("ExternalLinkIcon");return a(),l("div",null,[h,t("p",null,[e("官方文档："),t("a",c,[e("https://redis.io/commands"),r(d)])]),t("p",null,[e("中文文档："),t("a",y,[e("http://redisdoc.com/"),r(d)])]),k])}const p=s(n,[["render",m],["__file","五大数据类型及指令.html.vue"]]);export{p as default};
