import{_ as t}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as d,c as e,e as r}from"./app.47a8cb65.js";const a={},o=r('<p>created：在创建vue对象时，当html渲染之前就触发；但是注意，只会触发一次</p><p>mounted：是挂载vue实例后的钩子函数，钩子在主页挂载时执行一次，如果没有缓存的话，再次回到主页时，此函数还会执行</p><p>activated：是组件被激活后的钩子函数，每次回到页面都会执行</p><p>执行顺序：created =&gt; mounted =&gt;activated</p><p><img src="https://s2.loli.net/2022/12/30/CqLj7iDxraZ9dFW.png" alt="20221230123225"></p><table><thead><tr><th>函数名称</th><th>版本</th><th>说明</th></tr></thead><tbody><tr><td>beforeCreate</td><td>2.0+</td><td>vue实例创建初始化后，数据观测 (data observer) 和event/watch事件配置之前触发</td></tr><tr><td>created</td><td>2.0+</td><td>在实例创建完成后被立即调用，此时实例已完成数据观测 (data observer)，属性方法的运算，watch/event 事件回调的配置。然而，挂载阶段还没开始，$el 属性目前不可见</td></tr><tr><td>beforeMount</td><td>2.0+</td><td>实例挂载开始之前被调用， render 函数首次被调用，该钩子在服务器端渲染期间不被调用</td></tr><tr><td>mounted</td><td>2.0+</td><td>实例已挂载。mounted 不会承诺所有的子组件也都一起被挂载，如果你希望等到整个视图都渲染完毕再进行一些操作，该钩子在服务器端渲染期间不被调用</td></tr><tr><td>beforeUpdate</td><td>2.0+</td><td>数据更新时调用，发生在虚拟 DOM 打补丁之前，这里适合在更新之前访问现有的 DOM，比如手动移除已添加的事件监听器，该钩子在服务器端渲染期间不被调用，因为只有初次渲染会在服务端进行</td></tr><tr><td>updated</td><td>2.0+</td><td>数据更改会导致虚拟 DOM 重新渲染和打补丁，在这之后会调用updated钩子。updated 不会承诺所有的子组件也都一起被重绘。如果你希望等到整个视图都重绘完毕，updated钩子被调用时，组件 DOM 已经更新，你现在可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改实例中的状态属性，如果要相应状态改变，通常最好使用计算属性或 watcher</td></tr><tr><td>beforeDestroy</td><td>2.0+</td><td>实例销毁之前调用。在这一步，实例仍然完全可用，该钩子在服务器端渲染期间不被调用</td></tr><tr><td>destroyed</td><td>2.0+</td><td>Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会接触绑定，所有的事件监听器会被移除，所有的子实例也会被销毁，该钩子在服务器端渲染期间不被调用</td></tr><tr><td>activated</td><td>2.0+</td><td>当某个组件使用了keep-alive组件缓存时，该组件激活时调用activated钩子，该钩子在服务器端渲染期间不被调用</td></tr><tr><td>deactivated</td><td>2.0+</td><td>当某个组件使用了keep-alive组件缓存时，该组件停用时调用deactivated钩子，该钩子在服务器端渲染期间不被调用</td></tr><tr><td>errorCaptured</td><td>2.5.0+</td><td>当捕获一个来自子孙组件的错误时被调用。此钩子会收到三个参数：错误对象、发生错误的组件实例以及一个包含错误来源信息的字符串。此钩子可以返回 false 以阻止该错误继续向上传播</td></tr></tbody></table>',6),c=[o];function p(n,s){return d(),e("div",null,c)}const _=t(a,[["render",p],["__file","vue钩子函数.html.vue"]]);export{_ as default};
